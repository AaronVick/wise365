// pages/admin/api/admin/chat.js

import { Configuration, OpenAIApi } from 'openai';
import { getFirestore, collection, addDoc, serverTimestamp } from 'firebase/firestore';
import { initializeApp } from 'firebase/app';

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { agentId, message, prompt } = req.body;
  console.log('Received chat request:', { agentId, message });

  // Input Validation
  if (!agentId || !message || !prompt) {
    return res.status(400).json({ error: 'Missing required fields: agentId, message, or prompt.' });
  }

  try {
    // Communicate with OpenAI
    const openaiRes = await openai.createChatCompletion({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: prompt
        },
        {
          role: 'user',
          content: message
        }
      ],
      temperature: 0.7,
      max_tokens: 500,
    });

    // Extract and validate the response
    const reply = openaiRes.data.choices?.[0]?.message?.content?.trim();
    if (!reply) {
      throw new Error('No response generated by OpenAI.');
    }

    // Save to conversations collection
    const conversationData = {
      agentId,
      createdAt: serverTimestamp(),
      lastUpdatedAt: serverTimestamp(),
      createdBy: 'admin',
      messages: [
        {
          role: 'admin',
          content: message,
          timestamp: serverTimestamp()
        },
        {
          role: agentId,
          content: reply,
          timestamp: serverTimestamp()
        }
      ],
      participants: ['admin', agentId],
      teamId: 'admin_team',
      name: `Admin Chat with ${agentId}`,
      isShared: true
    };

    await addDoc(collection(db, 'conversations'), conversationData);
    console.log('Saved conversation to Firestore');

    return res.status(200).json({ reply });
  } catch (error) {
    console.error('Error in chat handler:', error);
    
    if (error.response?.data) {
      console.error('OpenAI API Error:', error.response.data);
    }
    
    return res.status(500).json({ 
      error: 'Failed to process chat request',
      message: error.message 
    });
  }
}